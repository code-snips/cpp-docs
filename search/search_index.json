{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"C++","text":"<p>A collection of code snippets for C++.</p>"},{"location":"#useful-repos","title":"Useful Repos","text":"<ul> <li>https://en.cppreference.com</li> <li>https://www.learncpp.com/</li> <li>https://github.com/cpp-best-practices/cppbestpractices</li> <li>Videos</li> <li>CppCon \"Back To Basics\" talks</li> <li>Mike Shah's C++ Tutorial Series </li> <li>C++ Weekly by Jason Turner.</li> <li>CopperSpice videos on C++</li> <li></li> <li></li> </ul> <p>source   - tutorials   - videos</p>"},{"location":"00_data_types/","title":"Data Types","text":"<p>Primitive data types are the foundation of programming in C++. They allow you to perform a variety of operations and store data in your programs. This tutorial covers the basics of primitive data types in modern C++, their sizes, ranges, and how to use them effectively.</p>"},{"location":"00_data_types/#integer-types","title":"Integer Types","text":"<p>Integer types are used to store whole numbers, both positive and negative.</p>"},{"location":"00_data_types/#int","title":"int","text":"<p>The <code>int</code> type is the most commonly used integer type. It's suitable for values without a fractional component.</p> <pre><code>int a = 5;\nint b = -5;\n</code></pre> <ul> <li>Size: Typically 4 bytes (32 bits).</li> <li>Range: -2,147,483,648 to 2,147,483,647 on most systems.</li> </ul>"},{"location":"00_data_types/#short","title":"short","text":"<p>The <code>short</code> type is used for smaller integers. It consumes less memory.</p> <pre><code>short s = 32767;\n</code></pre> <ul> <li>Size: 2 bytes (16 bits).</li> <li>Range: -32,768 to 32,767.</li> </ul>"},{"location":"00_data_types/#long","title":"long","text":"<p>The <code>long</code> type is used for integers larger than <code>int</code>.</p> <pre><code>long l = 2147483647;\n</code></pre> <ul> <li>Size: Typically 4 bytes (32 bits) on 32-bit systems and 8 bytes (64 bits) on 64-bit systems.</li> <li>Range: -2,147,483,648 to 2,147,483,647 on 32-bit systems; -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 on 64-bit systems.</li> </ul>"},{"location":"00_data_types/#long-long","title":"long long","text":"<p>The <code>long long</code> type is for very large integers.</p> <pre><code>long long ll = 9223372036854775807;\n</code></pre> <ul> <li>Size: 8 bytes (64 bits).</li> <li>Range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.</li> </ul>"},{"location":"00_data_types/#floating-point-types","title":"Floating Point Types","text":"<p>Floating-point types can represent numbers with fractional parts.</p>"},{"location":"00_data_types/#float","title":"float","text":"<p>The <code>float</code> type represents single-precision floating-point numbers.</p> <pre><code>float f = 3.14f;\n</code></pre> <ul> <li>Precision: About 7 decimal digits.</li> <li>Range: Approximately 1.2E-38 to 3.4E+38.</li> </ul>"},{"location":"00_data_types/#double","title":"double","text":"<p>The <code>double</code> type represents double-precision floating-point numbers.</p> <pre><code>double d = 3.141592653589793;\n</code></pre> <ul> <li>Precision: About 15 decimal digits.</li> <li>Range: Approximately 2.3E-308 to 1.7E+308.</li> </ul>"},{"location":"00_data_types/#long-double","title":"long double","text":"<p>The <code>long double</code> type provides extended precision for floating-point numbers.</p> <pre><code>long double ld = 3.141592653589793238462643383279502884L;\n</code></pre> <ul> <li>Precision and Range: Varies, typically more than <code>double</code>.</li> </ul>"},{"location":"00_data_types/#character-type","title":"Character Type","text":""},{"location":"00_data_types/#char","title":"char","text":"<p>The <code>char</code> type is used to store single characters.</p> <pre><code>char c = 'A';\n</code></pre> <ul> <li>Size: 1 byte (8 bits).</li> <li>Range: -128 to 127 for signed, 0 to 255 for unsigned.</li> </ul>"},{"location":"00_data_types/#boolean-type","title":"Boolean Type","text":""},{"location":"00_data_types/#bool","title":"bool","text":"<p>The <code>bool</code> type is used to store true or false values.</p> <pre><code>bool b = true;\n</code></pre> <ul> <li>Size: Typically 1 byte (8 bits).</li> <li>Values: <code>true</code> (1) or <code>false</code> (0).</li> </ul>"},{"location":"01_data_containers/","title":"Containers","text":"<p>In modern C++, beyond the primitive data types, there are several advanced data types that facilitate complex data management and operations. Among these, vectors, sets, and structs are extensively used. This tutorial provides an overview of these types, demonstrating their utility and application.</p>"},{"location":"01_data_containers/#vectors","title":"Vectors","text":"<p>Vectors are part of the Standard Template Library (STL) and represent a sequence of elements that can grow dynamically. Unlike arrays, vectors can adjust their size automatically.</p>"},{"location":"01_data_containers/#basic-usage-of-vectors","title":"Basic Usage of Vectors","text":"<pre><code>#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;int&gt; numbers = {1, 2, 3, 4, 5};\n    numbers.push_back(6); // Adds a new element at the end\n    numbers.pop_back(); // Removes the last element\n}\n</code></pre> <p>Vectors are versatile, supporting random access, insertion, and deletion of elements.</p>"},{"location":"01_data_containers/#sets","title":"Sets","text":"<p>Sets are a collection of unique elements, sorted by their values. They are useful for operations like union, intersection, and difference.</p>"},{"location":"01_data_containers/#basic-usage-of-sets","title":"Basic Usage of Sets","text":"<pre><code>#include &lt;set&gt;\n\nint main() {\n    std::set&lt;int&gt; uniqueNumbers = {2, 4, 2, 1, 3};\n    uniqueNumbers.insert(5); // Adds a new element\n    uniqueNumbers.erase(1); // Removes an element\n}\n</code></pre> <p>Sets automatically remove duplicates and keep elements sorted.</p>"},{"location":"01_data_containers/#structs","title":"Structs","text":"<p>Structs are user-defined data types that group variables under a single name. They are useful for creating complex data structures that represent objects or concepts.</p>"},{"location":"01_data_containers/#defining-and-using-a-struct","title":"Defining and Using a Struct","text":"<pre><code>#include &lt;string&gt;\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person person = {\"John Doe\", 30};\n}\n</code></pre> <p>Structs provide a way to model data more closely to real-world entities, making code more readable and maintainable.</p>"},{"location":"02_pointers/","title":"Pointers","text":"<p>Understanding pointers and smart pointers is crucial in C++ as they provide powerful tools for memory management and object-oriented programming. This tutorial will introduce both concepts, their usage, differences, and how to effectively apply them in modern C++ development.</p>"},{"location":"02_pointers/#pointers_1","title":"Pointers","text":"<p>Pointers are variables that store the memory address of another variable. They are used for dynamic memory allocation, array management, and implementing data structures and linked lists.</p>"},{"location":"02_pointers/#basic-pointer-usage","title":"Basic Pointer Usage","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int var = 10;\n    int* ptr = &amp;var;\n\n    std::cout &lt;&lt; \"Value of var: \" &lt;&lt; var &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Address of var: \" &lt;&lt; ptr &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Value at address stored in ptr: \" &lt;&lt; *ptr &lt;&lt; std::endl;\n}\n</code></pre> <p>Pointers can be dereferenced using the <code>*</code> operator to access or modify the value they point to.</p>"},{"location":"02_pointers/#smart-pointers","title":"Smart Pointers","text":"<p>Smart pointers are template classes that ensure automatic memory management to avoid memory leaks. They are part of the C++ Standard Library. The most commonly used smart pointers are <code>std::unique_ptr</code>, <code>std::shared_ptr</code>, and <code>std::weak_ptr</code>.</p>"},{"location":"02_pointers/#stdunique_ptr","title":"<code>std::unique_ptr</code>","text":"<p><code>std::unique_ptr</code> owns and manages another object through a pointer and disposes of that object when the <code>unique_ptr</code> goes out of scope.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nint main() {\n    std::unique_ptr&lt;int&gt; uniquePtr = std::make_unique&lt;int&gt;(10);\n\n    std::cout &lt;&lt; \"Value of uniquePtr: \" &lt;&lt; *uniquePtr &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"02_pointers/#stdshared_ptr","title":"<code>std::shared_ptr</code>","text":"<p><code>std::shared_ptr</code> allows multiple pointers to own the same resource. The resource is freed when the last <code>shared_ptr</code> is destroyed.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nint main() {\n    std::shared_ptr&lt;int&gt; sharedPtr1 = std::make_shared&lt;int&gt;(20);\n    std::shared_ptr&lt;int&gt; sharedPtr2 = sharedPtr1;\n\n    std::cout &lt;&lt; \"Value of sharedPtr1: \" &lt;&lt; *sharedPtr1 &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Value of sharedPtr2: \" &lt;&lt; *sharedPtr2 &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"sharedPtr1 use count: \" &lt;&lt; sharedPtr1.use_count() &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"02_pointers/#stdweak_ptr","title":"<code>std::weak_ptr</code>","text":"<p><code>std::weak_ptr</code> is a smart pointer that holds a non-owning (\"weak\") reference to an object that is managed by <code>std::shared_ptr</code>. It is used to break cyclic dependencies between <code>shared_ptr</code> instances.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nint main() {\n    std::shared_ptr&lt;int&gt; sharedPtr = std::make_shared&lt;int&gt;(30);\n    std::weak_ptr&lt;int&gt; weakPtr = sharedPtr;\n\n    std::cout &lt;&lt; \"Value of sharedPtr: \" &lt;&lt; *sharedPtr &lt;&lt; std::endl;\n    if (auto tempSharedPtr = weakPtr.lock()) {\n        std::cout &lt;&lt; \"Value of object pointed by weakPtr: \" &lt;&lt; *tempSharedPtr &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"The object pointed by weakPtr no longer exists.\" &lt;&lt; std::endl;\n    }\n}\n</code></pre>"},{"location":"03_concurrency/","title":"Concurrency","text":"<p>Concurrency in C++ is a powerful feature that allows your program to run multiple operations in parallel, making better use of the available hardware resources. This tutorial covers the basics of concurrency, threading, the use of mutexes for synchronization, and ensuring thread safety in modern C++.</p>"},{"location":"03_concurrency/#threading","title":"Threading","text":"<p>Threading is the most fundamental aspect of concurrency. C++11 introduced the <code>&lt;thread&gt;</code> library, simplifying the creation and management of threads.</p>"},{"location":"03_concurrency/#creating-threads","title":"Creating Threads","text":"<p>To create a thread, you instantiate an object of <code>std::thread</code> and pass a function to run in parallel.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nvoid helloWorld() {\n    std::cout &lt;&lt; \"Hello, World from a thread!\" &lt;&lt; std::endl;\n}\n\nint main() {\n    std::thread t(helloWorld);\n    t.join(); // Wait for the thread to finish\n}\n</code></pre>"},{"location":"03_concurrency/#passing-arguments-to-threads","title":"Passing Arguments to Threads","text":"<p>Arguments can be passed to the thread function directly.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nvoid printMessage(const std::string&amp; message) {\n    std::cout &lt;&lt; message &lt;&lt; std::endl;\n}\n\nint main() {\n    std::thread t(printMessage, \"Hello from the thread with arguments!\");\n    t.join();\n}\n</code></pre>"},{"location":"03_concurrency/#mutex-for-synchronization","title":"Mutex for Synchronization","text":"<p>When multiple threads access shared resources, data races and inconsistencies can occur. Mutexes are used to synchronize access to shared resources, ensuring thread safety.</p>"},{"location":"03_concurrency/#using-mutex","title":"Using Mutex","text":"<p>Here's how you can use a mutex to synchronize access to a shared variable.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;mutex&gt;\n\nstd::mutex mtx;\nint sharedVariable = 0;\n\nvoid incrementSharedVariable() {\n    mtx.lock();\n    ++sharedVariable;\n    mtx.unlock();\n}\n\nint main() {\n    std::thread t1(incrementSharedVariable);\n    std::thread t2(incrementSharedVariable);\n\n    t1.join();\n    t2.join();\n\n    std::cout &lt;&lt; \"Shared Variable: \" &lt;&lt; sharedVariable &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"03_concurrency/#stdlock_guard","title":"std::lock_guard","text":"<p><code>std::lock_guard</code> is a mutex wrapper that provides a convenient RAII-style mechanism for owning a mutex for the duration of a scoped block.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;mutex&gt;\n\nstd::mutex mtx;\nint sharedVariable = 0;\n\nvoid safeIncrement() {\n    std::lock_guard&lt;std::mutex&gt; guard(mtx);\n    ++sharedVariable;\n}\n\nint main() {\n    std::thread t1(safeIncrement);\n    std::thread t2(safeIncrement);\n\n    t1.join();\n    t2.join();\n\n    std::cout &lt;&lt; \"Shared Variable: \" &lt;&lt; sharedVariable &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"03_concurrency/#thread-safety","title":"Thread Safety","text":"<p>Thread safety is a concept in concurrency that ensures that shared data is accessed by multiple threads without causing data corruption or inconsistencies.</p>"},{"location":"03_concurrency/#strategies-for-thread-safety","title":"Strategies for Thread Safety","text":"<ul> <li>Mutexes: As shown above, mutexes can protect shared data.</li> <li>Atomic Types: C++ provides atomic types in the <code>&lt;atomic&gt;</code> header, which can be used without the need for explicit mutexes for simple data types.</li> <li>Thread-Local Data: Data that is only accessed by a single thread does not need synchronization.</li> <li>Immutable Data: Data that does not change after its creation does not require synchronization.</li> </ul>"},{"location":"90_docker/","title":"Docker","text":"<p>Use docker to create a defined environment, so the application runs on every machine. Thanks to YT.</p> <p>Resources</p> <p>YT</p> <p>Docker</p>"},{"location":"90_docker/#virtual-machine-vs-container","title":"virtual machine vs container","text":""},{"location":"90_docker/#virtual-machines","title":"Virtual Machines","text":"<p>A virtual machine, \"vm\", is a hypervisor, such as Virtualbox, VMWare, Hyper-v Problems:  - Each vm needs a complete OS  - Slow to start  - resource intensive</p>"},{"location":"90_docker/#containers","title":"Containers","text":"<ul> <li>allow running multiple apps in isolation</li> <li>lightweight</li> <li>use the os of the host</li> <li>start quickly (under a  second)</li> <li>less recouse intensive. 10 - 100 docker containers can runn concurrently</li> </ul>"},{"location":"90_docker/#docker-architecture","title":"Docker architecture","text":"<ul> <li>The docker engine runs as a \"application\" in your os.</li> <li>The docker  engine makes use of the os kernel. the container you run is depending on the kernel type. linux can run linux containers. windows can run windows and linux containers. mac uses a linux vm to run linux containers</li> </ul>"},{"location":"90_docker/#install-docker","title":"Install docker","text":"<p>download</p> <p>check your version</p> <pre><code>docker version\n</code></pre> <p>## developement workflow</p> <p>we take an application and <code>dockerize</code> it by creating a dockerfile</p> <p>a docker image contains   - cut down os   - runtime environment   - application files   - third party libs   - env variables</p> <p>with the dockerfile, dockerfile can package our application to an <code>image</code>. images are immutable</p>"},{"location":"90_docker/#build-your-first-image","title":"build your first image","text":"<ul> <li>select a base image from the Docker Registry Hub. select what you need, python, node, ..</li> <li></li> </ul> <p>app.js<pre><code> console.log(\"Hello from Docker\");\n</code></pre> dsa</p> <p>Dockerfile<pre><code>FROM node:alpine\nCOPY . /app\nWORKDIR /app\nCMD node app.js\n</code></pre> Build the docker image. <code>-t</code> is the name tag.</p> <pre><code>cd &lt;working_dir&gt;\ndocker build -t hello-docker .\n</code></pre> <p>Show installed docker repositories.</p> <pre><code>docker image ls\n</code></pre> <p>Run the docker image with the following command.</p> <pre><code>docker run hello-docker\n</code></pre>"},{"location":"90_docker/#from-existing-workspace","title":"from existing workspace","text":"<p>vscode devcontainers open existing</p> <p>vscode devcontainers getting started</p> <p>Project template for optimizing:</p> <p>https://github.com/cpp-best-practices/cmake_template</p>"},{"location":"90_docker/#package-managers","title":"Package managers","text":"<ul> <li>conan.io</li> <li>vpkg (windows)</li> <li>cpm (lightweight)</li> <li>system managers like apt</li> <li>raw git pull &amp;&amp; cmake</li> </ul>"},{"location":"91_jenkins/","title":"Jenkins","text":"<p>CI / CD</p>"},{"location":"99_mkdocs/","title":"MkDocs","text":"<p>run with  <pre><code>. venv\\scripts\\activate\nmkdocs serve\n</code></pre></p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"99_mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"99_mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"99_mkdocs/#mkdocs-config","title":"MkDocs Config","text":"<pre><code>python --version\npip --version\n\nC:\\workspaces\\cpp-docs\\cpp-docs&gt; python -m venv venv\nC:\\workspaces\\cpp-docs\\cpp-docs&gt; . venv\\scripts\\activate\n\npip install mkdocs-material\n\nmkdocs new .\nmkdocs serve\n</code></pre>"},{"location":"99_mkdocs/#prompts","title":"prompts","text":"<pre><code>write a professional tutorial for modern c++ with the following topic: primitive datatypes\nuse the .md format to generate mkdocs. wrap codeblocks with *** instead of ``` put the whole response in a single codeblock\n</code></pre>"}]}